//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Simple Pie Menu/Demos/Displaying a Pie Menu/New Input System/PieMenuDemoControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace SimplePieMenu
{
    public partial class @PieMenuDemoControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PieMenuDemoControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PieMenuDemoControls"",
    ""maps"": [
        {
            ""name"": ""PieMenu"",
            ""id"": ""3f36ec57-bf8c-476d-bd21-9634b566e84a"",
            ""actions"": [
                {
                    ""name"": ""Display"",
                    ""type"": ""Button"",
                    ""id"": ""8e686d54-5cf7-4a34-9e8e-6765ce61aba7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8fbaf469-dd20-4e0e-842c-f61a6bd225ea"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Display"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PieMenu
            m_PieMenu = asset.FindActionMap("PieMenu", throwIfNotFound: true);
            m_PieMenu_Display = m_PieMenu.FindAction("Display", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PieMenu
        private readonly InputActionMap m_PieMenu;
        private List<IPieMenuActions> m_PieMenuActionsCallbackInterfaces = new List<IPieMenuActions>();
        private readonly InputAction m_PieMenu_Display;
        public struct PieMenuActions
        {
            private @PieMenuDemoControls m_Wrapper;
            public PieMenuActions(@PieMenuDemoControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Display => m_Wrapper.m_PieMenu_Display;
            public InputActionMap Get() { return m_Wrapper.m_PieMenu; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PieMenuActions set) { return set.Get(); }
            public void AddCallbacks(IPieMenuActions instance)
            {
                if (instance == null || m_Wrapper.m_PieMenuActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PieMenuActionsCallbackInterfaces.Add(instance);
                @Display.started += instance.OnDisplay;
                @Display.performed += instance.OnDisplay;
                @Display.canceled += instance.OnDisplay;
            }

            private void UnregisterCallbacks(IPieMenuActions instance)
            {
                @Display.started -= instance.OnDisplay;
                @Display.performed -= instance.OnDisplay;
                @Display.canceled -= instance.OnDisplay;
            }

            public void RemoveCallbacks(IPieMenuActions instance)
            {
                if (m_Wrapper.m_PieMenuActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPieMenuActions instance)
            {
                foreach (var item in m_Wrapper.m_PieMenuActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PieMenuActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PieMenuActions @PieMenu => new PieMenuActions(this);
        public interface IPieMenuActions
        {
            void OnDisplay(InputAction.CallbackContext context);
        }
    }
}
