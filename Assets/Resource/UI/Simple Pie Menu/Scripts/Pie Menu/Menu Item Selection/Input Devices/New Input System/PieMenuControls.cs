//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Simple Pie Menu/Scripts/Pie Menu/Menu Item Selection/Input Devices/New Input System/PieMenuControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace SimplePieMenu
{
    public partial class @PieMenuControls: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PieMenuControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PieMenuControls"",
    ""maps"": [
        {
            ""name"": ""MouseAndKeyboard"",
            ""id"": ""57d71994-ef4d-44b0-b848-eb4cd65d2dd8"",
            ""actions"": [
                {
                    ""name"": ""Selection"",
                    ""type"": ""Button"",
                    ""id"": ""758310ad-2d2f-441a-a069-a787082fcc8f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Close"",
                    ""type"": ""Button"",
                    ""id"": ""c034a993-d15b-4eba-bc13-ad64b802bef5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pointer Position"",
                    ""type"": ""Value"",
                    ""id"": ""73cdcf3e-1545-47e1-b6c5-d6996058bbf8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""5b476b9c-c389-4082-a44e-8f6ee70545f8"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Close"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""74c6b187-2f2f-4a39-8f67-54d0f4c75215"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pointer Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""cdabd5a9-c7e1-4958-868b-bf7b7407f669"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Selection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // MouseAndKeyboard
            m_MouseAndKeyboard = asset.FindActionMap("MouseAndKeyboard", throwIfNotFound: true);
            m_MouseAndKeyboard_Selection = m_MouseAndKeyboard.FindAction("Selection", throwIfNotFound: true);
            m_MouseAndKeyboard_Close = m_MouseAndKeyboard.FindAction("Close", throwIfNotFound: true);
            m_MouseAndKeyboard_PointerPosition = m_MouseAndKeyboard.FindAction("Pointer Position", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // MouseAndKeyboard
        private readonly InputActionMap m_MouseAndKeyboard;
        private List<IMouseAndKeyboardActions> m_MouseAndKeyboardActionsCallbackInterfaces = new List<IMouseAndKeyboardActions>();
        private readonly InputAction m_MouseAndKeyboard_Selection;
        private readonly InputAction m_MouseAndKeyboard_Close;
        private readonly InputAction m_MouseAndKeyboard_PointerPosition;
        public struct MouseAndKeyboardActions
        {
            private @PieMenuControls m_Wrapper;
            public MouseAndKeyboardActions(@PieMenuControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Selection => m_Wrapper.m_MouseAndKeyboard_Selection;
            public InputAction @Close => m_Wrapper.m_MouseAndKeyboard_Close;
            public InputAction @PointerPosition => m_Wrapper.m_MouseAndKeyboard_PointerPosition;
            public InputActionMap Get() { return m_Wrapper.m_MouseAndKeyboard; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MouseAndKeyboardActions set) { return set.Get(); }
            public void AddCallbacks(IMouseAndKeyboardActions instance)
            {
                if (instance == null || m_Wrapper.m_MouseAndKeyboardActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_MouseAndKeyboardActionsCallbackInterfaces.Add(instance);
                @Selection.started += instance.OnSelection;
                @Selection.performed += instance.OnSelection;
                @Selection.canceled += instance.OnSelection;
                @Close.started += instance.OnClose;
                @Close.performed += instance.OnClose;
                @Close.canceled += instance.OnClose;
                @PointerPosition.started += instance.OnPointerPosition;
                @PointerPosition.performed += instance.OnPointerPosition;
                @PointerPosition.canceled += instance.OnPointerPosition;
            }

            private void UnregisterCallbacks(IMouseAndKeyboardActions instance)
            {
                @Selection.started -= instance.OnSelection;
                @Selection.performed -= instance.OnSelection;
                @Selection.canceled -= instance.OnSelection;
                @Close.started -= instance.OnClose;
                @Close.performed -= instance.OnClose;
                @Close.canceled -= instance.OnClose;
                @PointerPosition.started -= instance.OnPointerPosition;
                @PointerPosition.performed -= instance.OnPointerPosition;
                @PointerPosition.canceled -= instance.OnPointerPosition;
            }

            public void RemoveCallbacks(IMouseAndKeyboardActions instance)
            {
                if (m_Wrapper.m_MouseAndKeyboardActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IMouseAndKeyboardActions instance)
            {
                foreach (var item in m_Wrapper.m_MouseAndKeyboardActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_MouseAndKeyboardActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public MouseAndKeyboardActions @MouseAndKeyboard => new MouseAndKeyboardActions(this);
        public interface IMouseAndKeyboardActions
        {
            void OnSelection(InputAction.CallbackContext context);
            void OnClose(InputAction.CallbackContext context);
            void OnPointerPosition(InputAction.CallbackContext context);
        }
    }
}
